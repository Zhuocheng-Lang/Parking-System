name: CMake Build, Test and Quality Check

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Debug, Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: clang
          - os: macos-latest
            c_compiler: clang
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up build environment (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake tree
        # 安装中文locale支持
        sudo apt-get install -y locales-all

    - name: Set up build environment (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake tree

    - name: Set up MSVC (Windows)
      if: runner.os == 'Windows' && matrix.c_compiler == 'cl'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} \
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -S ${{ github.workspace }}

    - name: Build
      run: |
        cmake --build ${{ steps.strings.outputs.build-output-dir }} \
          --config ${{ matrix.build_type }} \
          --parallel

    - name: List build outputs
      shell: bash
      run: |
        echo "Build directory contents:"
        if [ "$RUNNER_OS" == "Windows" ]; then
          dir /s ${{ steps.strings.outputs.build-output-dir }}
        else
          tree ${{ steps.strings.outputs.build-output-dir }}
        fi

    - name: Run Tests with CTest
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      shell: bash
      run: |
        # 设置UTF-8编码以支持中文输出
        export LANG=zh_CN.UTF-8
        export LC_ALL=zh_CN.UTF-8
        
        # 运行CTest
        ctest --build-config ${{ matrix.build_type }} --output-on-failure --verbose

    - name: Run direct test executables (fallback)
      if: failure()
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      shell: bash
      run: |
        echo "CTest failed, trying to run test executables directly..."
        for test_name in test_parking_data test_parking_service test_parking_ui; do
          echo "--- Running ${test_name} ---"
          if [ "$RUNNER_OS" == "Windows" ]; then
            if [ -f "./${{ matrix.build_type }}/${test_name}.exe" ]; then
              ./${{ matrix.build_type }}/${test_name}.exe
            elif [ -f "./${test_name}.exe" ]; then
              ./${test_name}.exe
            fi
          else
            if [ -f "./${test_name}" ]; then
              ./${test_name}
            fi
          fi
        done

    - name: Run demo programs
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      shell: bash
      timeout-minutes: 1 # 添加超时以防程序挂起
      run: |
        echo "Running demo programs..."
        # FIX: Corrected demo program names
        demos=("data_layer_demo" "service_demo")
        for demo in "${demos[@]}"; do
          echo "--- Running ${demo} ---"
          if [ "$RUNNER_OS" == "Windows" ]; then
            if [ -f "./${{ matrix.build_type }}/${demo}.exe" ]; then
              echo "n" | ./${{ matrix.build_type }}/${demo}.exe || true
            fi
          else
            if [ -f "./${demo}" ]; then
              echo "n" | ./${demo} || true
            fi
          fi
        done

    - name: Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}
        # FIX: Corrected paths to include all executables
        path: |
          ${{ steps.strings.outputs.build-output-dir }}/**/*.exe
          ${{ steps.strings.outputs.build-output-dir }}/**/Parking-System
          ${{ steps.strings.outputs.build-output-dir }}/**/test_parking_data
          ${{ steps.strings.outputs.build-output-dir }}/**/test_parking_service
          ${{ steps.strings.outputs.build-output_dir }}/**/test_parking_ui
          ${{ steps.strings.outputs.build-output-dir }}/**/data_layer_demo
          ${{ steps.strings.outputs.build-output-dir }}/**/service_demo
        retention-days: 7

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install analysis tools
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-tools

    - name: Run cppcheck
      run: |
        cppcheck --enable=all --std=c90 --platform=unix64 \
          --suppress=missingIncludeSystem \
          --suppress=unusedFunction \
          --suppress=missingInclude \
          --error-exitcode=1 \
          src/ tests/ demos/

    - name: Check code formatting
      continue-on-error: true
      run: |
        if command -v clang-format >/dev/null 2>&1; then
          # FIX: Removed `|| true` to allow the step to correctly report errors
          find src tests demos -name "*.c" -o -name "*.h" | \
            xargs clang-format --dry-run --Werror --style=file
        fi

  documentation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Check documentation and directory structure
      run: |
        test -f README.md || (echo "README.md not found" && exit 1)
        test -f CMakeLists.txt || (echo "CMakeLists.txt not found" && exit 1)
        test -d src || (echo "src directory not found" && exit 1)
        test -d tests || (echo "tests directory not found" && exit 1)
        test -d demos || (echo "demos directory not found" && exit 1)
        echo "Documentation and structure check passed!"
